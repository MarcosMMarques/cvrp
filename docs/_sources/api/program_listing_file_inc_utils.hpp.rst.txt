
.. _program_listing_file_inc_utils.hpp:

Program Listing for File utils.hpp
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_inc_utils.hpp>` (``inc/utils.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef UTILS_HPP
   #define UTILS_HPP
   
   #include <iostream>
   #include <vector>
   #include <random>
   #include <math.h>
   #include <climits>
   #include <unordered_set>
   #include <set>
   #include <memory>
   #include <algorithm>
   #include <iomanip>
   #include <map>
   #include <queue>
   #include <unistd.h>
   #include <cstdio>
   #include <ctime>
   
   class Node{
   public:
     int x, y, id, demand;
     bool is_routed;
   
     Node(int x = 0, int y = 0, int id = 0, int demand = 0, bool is_routed = true):x(x), y(y), id(id), demand(demand), is_routed(is_routed){}
   
     void PrintStatus();
   };
   
   class Route{
   public:
     double cost = 0;
     std::vector<int> nodes;
   
     void PrintStatus();
   
     void PrintRoute();
   
     void CalculateCost(std::vector<std::vector<double>> distanceMatrix);
   };
   
   
   class Vehicle: public Route{
   public:
     int id, load, capacity;
   
     Vehicle(int id = 0, int load = 0, int capacity = 0) : id(id), load(load), capacity(capacity){}
   
     void PrintStatus();
   };
   
   class Problem{
   public:
     std::vector<Node> nodes;
     std::vector<Vehicle> vehicles;
     std::vector<std::vector<double>> distanceMatrix;
     Node depot;
     int capacity;
   
     Problem(int noc = 1000, int demand_range = 40, int nov = 50, int capacity = 800, int grid_range = 1000, std::string distribution = "uniform", int n_clusters = 5, int cluster_range = 10);
   };
   
   // Solution class should not call problems's constructor so not inheriting.
   class Solution{
   public:
     std::vector<Node> nodes;
     std::vector<Vehicle> vehicles;
     std::vector<std::vector<double>> distanceMatrix;
     Node depot;
     int capacity;
     Solution(std::vector<Node> nodes, std::vector<Vehicle> vehicles, std::vector<std::vector<double>> distanceMatrix);
   
     Solution(Problem p);
   
     void CreateInitialSolution();
   
     bool CheckSolutionValid();
   
     virtual void Solve();
   
     Node find_closest(Vehicle& v, std::vector<std::vector<double>>& distanceMatrix, std::vector<Node>& nodes);
   };
   
   #endif
