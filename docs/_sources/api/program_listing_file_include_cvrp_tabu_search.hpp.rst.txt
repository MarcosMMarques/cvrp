
.. _program_listing_file_include_cvrp_tabu_search.hpp:

Program Listing for File tabu_search.hpp
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_cvrp_tabu_search.hpp>` (``include/cvrp/tabu_search.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef TS_HPP
   #define TS_HPP
   
   #include "cvrp/utils.hpp"
   
   struct VectorHash {
     size_t operator()(const std::vector<int> &v) const {
       std::hash<int> hasher;
       size_t seed = 0;
       for (int i : v) {
         seed ^= hasher(i) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
       }
       return seed;
     }
   };
   
   class TabuSearchSolution : public Solution {
   public:
     TabuSearchSolution(const std::vector<Node>& nodes, const std::vector<Vehicle>& vehicles,
                        const std::vector<std::vector<double>>& distanceMatrix,
                        const int n_tabu = 50);
     TabuSearchSolution(const Problem& p, const int n_tabu = 50);
   
     TabuSearchSolution(const Solution& s, const int n_tabu = 50);
   
     void Solve();
   
   private:
     int n_tabu_;
     double best_cost_, new_cost_;
     const int max_it = 500;
   
     std::vector<std::vector<int>> to_check_ = std::vector<std::vector<int>>(6, std::vector<int>(2, 0));; 
         // invert order of v1, v2 and cur, rep+1
     std::unordered_set<std::vector<int>, VectorHash> tabu_list_set_;
     std::queue<std::vector<int>> tabu_list_queue_;
   
     inline bool IsTabu(const int begin, const int end);
   
     inline bool Aspiration(double cost_increase, double cost_reduction);
   };
   
   #endif // TS_HPP
